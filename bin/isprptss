#!/usr/bin/env raku

use Spreadsheet::XLSX;
use ISP::dsmadmc;
use Data::Dump::Tree;

my %ISPLC02-inc     = (
                        ISPLC02                     => 0,
                      );

my %JATSMPRD02-inc  = (
                        CTSPSDB01SV                 => 0,
                        JADBCGNPRD01-GISPRD1-TDP    => 0,
                        JADBCGNPRD01-GISRPRD1-TDP   => 0,
                        JGCOUNDBLB01WPV             => 0,
                        JGMTDB01LPV-TKCSPROD-TDP    => 0,
                        JGOHAWDB01PV                => 0,
                        JGOHAWDB02PV                => 0,
                        P590A1-ITRPPRD1-TDP         => 0,
                        P590A1-PDBX-TDP             => 0,
                        P590A1-STATPROD-TDP         => 0,
                        P590A1-TASPRD1-TDP          => 0,
                        P590A1-TTRPPROD-TDP         => 0,
                        P590A10-NBUSPRD1-TDP        => 0,
                        P590A10-TDBPRD3-TDP         => 0,
                        P595A13-OEMPROD-TDP         => 0,
                        P770A21-EFTPRD1-TDP         => 0,
                        P770A21-SBFTPRD1-TDP        => 0,
                        P770A21-WMTPRD1-TDP         => 0,
                        SMB_DCI_SQL_BACKUPS         => 0,
                      );

my %CATSMDEV01-inc  = (
                        CADBFAREDR21-SBFTPRD1-TDP   => 0,
                        P590B10-TDBQA2-TDP          => 0,
                        P590B10-TDBQA3-TDP          => 0,
                        CTMTDB01LQV-TKCSUAT-TDP     => 0,
                        CTMTDB01LQV-TKCSDEV-TDP     => 0,
                        CTMTDB01LQV-TKCSTRN-TDP     => 0,
                        CTMTDB01LQV-TKCSTST-TDP     => 0,
                        CTMTDB01LQV-TKCSSTG2-TDP    => 0,
                        CTMTDB01LQV-TKCSDEV2-TDP    => 0,
                        CTMTDB01LQV-TKCSSTG3-TDP    => 0,
                        CADBBUSDR10-NBUSPRD1-TDP    => 0,
                        CADBBUSDR10-TDBPRD3-TDP     => 0,
                        CADBFAREDR21-EFTPRD1-TDP    => 0,
                        CADBFAREDR21-WMTPRD1-TDP    => 0,
                        CADBFAREDEV01-EFTQA1-TDP    => 0,
                        CADBFAREQA1-SBFTQA1-TDP     => 0,
                        CADBFAREQA1-EFTQA1-TDP      => 0,
                        CADBFAREQA1-WMTQA1-TDP      => 0,
                        CADBFAREQA1-SBFTQA3-TDP     => 0,
                        CADBFAREDEV01-WMTPRD1-TDP   => 0,
                        CADBFAREDEV01-SBFTPRD1-TDP  => 0,
                        CADBFAREQA1-WMTQA3-TDP      => 0,
                        CADBFAREQA1-EFTQA3-TDP      => 0,
                        JGDBMEDICALDV               => 0,
                        NCS-DNS-CTF                 => 0,
                        CTNCSAPPPM1WDV              => 0,
                        CTCOUNDBLB01WPV             => 0,
                      );

my %P520TSMJGB-inc  = (
                        JGMTPDDBCAD1PV              => 0,
                        JGMTPDDBCAD2PV              => 0,
                        JGMTPDDBRMS1PV              => 0,
                        JGMTPDDBRMS2PV              => 0,
                        JGMTPDRDWCADPV              => 0,
                        JGMTPDRDWRMSPV              => 0,
                        RCTRESZYIPP                 => 0,
                        JGAPPWWW1PP                 => 0,
                        JGDBMEDICALPV               => 0,
                      );

my $isp-admin       = 'A028441';
my @isp-servers     = <ISPLC01 ISPLC02 JATSMPRD02 P520TSMJGB CATSMDEV01>;

my $outfile;
given $ = run(<uname -n>, :out).out.slurp.chomp {
    when 'L-707970' { $outfile = '/mnt/c/Users/E028441/Downloads/IBM/ISP/Reporting/ISP Reporting.xlsx';   }
    when 'W-608863' { $outfile = '/mnt/d/Downloads/ISP/Reporting/ISP Reporting.xlsx';                 }
    default         { die;                                                                      }
}

my @query-occupancy = <select NODE_NAME, sum ( REPORTING_MB ) / 1024 as GB from OCCUPANCY where STGPOOL_NAME in ( select STGPOOL_NAME from STGPOOLS where POOLTYPE='PRIMARY' ) group by NODE_NAME>;
my @query-contacts  = <select NODE_NAME, CONTACT from NODES>;
my @query-bucg      = <select trim(char(DOMAIN_NAME))||':'||trim(char(CLASS_NAME)) as "DOMAIN_CLASS",RETEXTRA from BU_COPYGROUPS where SET_NAME='ACTIVE'>;
my @query-assoc     = <select DOMAIN_NAME,SCHEDULE_NAME,NODE_NAME from ASSOCIATIONS>;
my @query-sched     = <select DOMAIN_NAME,SCHEDULE_NAME,STARTDATE,STARTTIME from CLIENT_SCHEDULES>;

sub byGB (Spreadsheet::XLSX:D $workbook) {

################################################################################
###     Gather data from all sources                                         ###
################################################################################

    my %data;
    my %BU2GB;
    my %NODE2GB;
    my %BUCG2RET;
    my %NODE2SCHED;

    for @isp-servers -> $isp-server {
        my $dsmadmc     = ISP::dsmadmc.new(:$isp-admin, :$isp-server);
        my @occupancy   = $dsmadmc.execute(@query-occupancy);
        for @occupancy.sort -> $rcd {
            next unless $rcd<NODE_NAME>;
            if $isp-server eq 'ISPLC02' {
                next unless %ISPLC02-inc{$rcd<NODE_NAME>}:exists;
            }
            if $isp-server eq 'JATSMPRD02' {
                next unless %JATSMPRD02-inc{$rcd<NODE_NAME>}:exists;
            }
            if $isp-server eq 'P520TSMJGB' {
                next unless %P520TSMJGB-inc{$rcd<NODE_NAME>}:exists;
            }
            if $isp-server eq 'CATSMDEV01' {
                next unless %CATSMDEV01-inc{$rcd<NODE_NAME>}:exists;
            }
            %data{$isp-server}{$rcd<NODE_NAME>}<GB> = $rcd<GB>.trim;
            %NODE2GB{$rcd<NODE_NAME>} += $rcd<GB>.trim;
        }
        my @contacts    = $dsmadmc.execute(@query-contacts);
        for @contacts.sort -> $rcd {
            if $isp-server eq 'ISPLC02' {
                next unless %ISPLC02-inc{$rcd<NODE_NAME>}:exists;
            }
            if $isp-server eq 'JATSMPRD02' {
                next unless %JATSMPRD02-inc{$rcd<NODE_NAME>}:exists;
            }
            if $isp-server eq 'P520TSMJGB' {
                next unless %P520TSMJGB-inc{$rcd<NODE_NAME>}:exists;
            }
            if $isp-server eq 'CATSMDEV01' {
                next unless %CATSMDEV01-inc{$rcd<NODE_NAME>}:exists;
            }
            %data{$isp-server}{$rcd<NODE_NAME>}<BU> = $rcd<CONTACT>.subst(/^.*';'/).trim;
        }
        if $isp-server eq 'ISPLC01' {
            my @bucg = $dsmadmc.execute(@query-bucg);
            for @bucg.sort -> $rcd {
                %BUCG2RET{$rcd<DOMAIN_CLASS>} = $rcd<RETEXTRA>.trim;
            }
        }
        my %sched;
        %sched          = ();
        my @sched       = $dsmadmc.execute(@query-sched);
        for @sched -> $rcd {
            my ($year, $month, $day) = $rcd<STARTDATE>.split: '-';
            my ($hour, $minute, $second) = $rcd<STARTTIME>.split: ':';;
            %sched{$rcd<DOMAIN_NAME>}{$rcd<SCHEDULE_NAME>} = DateTime.new(:$year, :$month, :$day, :$hour, :$minute, :$second).hh-mm-ss;
        }
        my @assoc       = $dsmadmc.execute(@query-assoc);
        for @assoc -> $rcd {
            if $isp-server eq 'ISPLC02' {
                next unless %ISPLC02-inc{$rcd<NODE_NAME>}:exists;
            }
            if $isp-server eq 'JATSMPRD02' {
                next unless %JATSMPRD02-inc{$rcd<NODE_NAME>}:exists;
            }
            if $isp-server eq 'P520TSMJGB' {
                next unless %P520TSMJGB-inc{$rcd<NODE_NAME>}:exists;
            }
            if $isp-server eq 'CATSMDEV01' {
                next unless %CATSMDEV01-inc{$rcd<NODE_NAME>}:exists;
            }
 
#%%%    Might be SQL Server FULL+LOG on the same server...
#
#           if %NODE2SCHED{$rcd<NODE_NAME>}:exists {
#               $*ERR.put: "dup:  $rcd<NODE_NAME> via $isp-server";
#               next;
#           }

            %NODE2SCHED{$rcd<NODE_NAME>} = %sched{$rcd<DOMAIN_NAME>}{$rcd<SCHEDULE_NAME>};
        }
    }

    for %data.keys.sort -> $isp-server {
        for %data{$isp-server}.keys.sort -> $node-name {
            next unless %data{$isp-server}{$node-name}<BU> && %data{$isp-server}{$node-name}<GB>;
            %BU2GB{%data{$isp-server}{$node-name}<BU>} += %data{$isp-server}{$node-name}<GB>;
        }
    }


################################################################################
###     Output Excel                                                         ###
################################################################################

    my $sheet;
    my @bu2gb                       = %BU2GB.keys.sort;
    my @node2gb                     = %NODE2GB.keys.sort;
    my @dc2ret                      = %BUCG2RET.keys.sort;
    my @node2sched                  = %NODE2SCHED.keys.sort;

    $sheet                          = $workbook.create-worksheet('By NODE');
    $sheet.cells[0;0]               = Spreadsheet::XLSX::Cell::Text.new(value => 'NODE');
    $sheet.cells[0;0].style.bold    = True;
    $sheet.cells[0;1]               = Spreadsheet::XLSX::Cell::Text.new(value => 'GB');
    $sheet.cells[0;1].style.bold    = True;
    printf "\n%-20s%s\n", 'NODE', 'GB';
    loop (my $i = 0; $i < @node2gb.elems; $i++) {
        printf "%-20s%.2f\n", @node2gb[$i], +%NODE2GB{@node2gb[$i]};
        $sheet.cells[$i+1;0]        = Spreadsheet::XLSX::Cell::Text.new(value => @node2gb[$i]);
        $sheet.cells[$i+1;1]        = Spreadsheet::XLSX::Cell::Text.new(value => %NODE2GB{@node2gb[$i]}.Str);
#       $sheet.cells[$i+1;1].style.number-format = '#,###';
    }

    $sheet                          = $workbook.create-worksheet('By BU');
    $sheet.cells[0;0]               = Spreadsheet::XLSX::Cell::Text.new(value => 'BUSINESS UNIT');
    $sheet.cells[0;0].style.bold    = True;
    $sheet.cells[0;1]               = Spreadsheet::XLSX::Cell::Text.new(value => 'GB');
    $sheet.cells[0;1].style.bold    = True;
    printf "\n%-20s%s\n", 'BUSINESS UNIT', 'GB';
    loop ($i = 0; $i < @bu2gb.elems; $i++) {
        printf "%-20s%.2f\n", @bu2gb[$i], +%BU2GB{@bu2gb[$i]};
        $sheet.cells[$i+1;0]        = Spreadsheet::XLSX::Cell::Text.new(value => @bu2gb[$i]);
        $sheet.cells[$i+1;1]        = Spreadsheet::XLSX::Cell::Text.new(value => %BU2GB{@bu2gb[$i]}.Str);
    }

    $sheet                          = $workbook.create-worksheet('Retentions');
    $sheet.cells[0;0]               = Spreadsheet::XLSX::Cell::Text.new(value => 'Domain:Class');
    $sheet.cells[0;0].style.bold    = True;
    $sheet.cells[0;1]               = Spreadsheet::XLSX::Cell::Text.new(value => 'Days Retained (del/mod)');
    $sheet.cells[0;1].style.bold    = True;
    printf "\n%-20s%s\n", 'Domain:Class', 'Days Retained (del/mod)';
    loop ($i = 0; $i < @dc2ret.elems; $i++) {
        printf "%-20s%2d\n", @dc2ret[$i], +%BUCG2RET{@dc2ret[$i]};
        $sheet.cells[$i+1;0]        = Spreadsheet::XLSX::Cell::Text.new(value => @dc2ret[$i]);
        $sheet.cells[$i+1;1]        = Spreadsheet::XLSX::Cell::Text.new(value => %BUCG2RET{@dc2ret[$i]}.Str);
    }

    $sheet                          = $workbook.create-worksheet('Retentions');
    $sheet.cells[0;0]               = Spreadsheet::XLSX::Cell::Text.new(value => 'Node');
    $sheet.cells[0;0].style.bold    = True;
    $sheet.cells[0;1]               = Spreadsheet::XLSX::Cell::Text.new(value => 'Schedule Time');
    $sheet.cells[0;1].style.bold    = True;
    printf "\n%-20s%s\n", 'Node', 'Schedule Time)';
    loop ($i = 0; $i < @node2sched.elems; $i++) {
        printf "%-20s%s\n", @node2sched[$i], %NODE2SCHED{@node2sched[$i]};
        $sheet.cells[$i+1;0]        = Spreadsheet::XLSX::Cell::Text.new(value => @node2sched[$i]);
        $sheet.cells[$i+1;1]        = Spreadsheet::XLSX::Cell::Text.new(value => %NODE2SCHED{@node2sched[$i]}.Str);
    }
}

sub MAIN () {
    my $workbook    = Spreadsheet::XLSX.new;
    byGB($workbook);
    $workbook.save($outfile);
}

=finish
